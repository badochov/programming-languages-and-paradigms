entrypoints Program ;

-- programs ------------------------------------------------
token VarName (lower (letter | digit | '_')*) ;
token TypeName (upper (letter | digit | '_')*) ;

Program.                        Program ::= [TopDef] ;

TopDefVar.                      TopDef ::= VarDef ";" ;
TopDefType.                     TopDef ::= "type" TypeName "=" [VariantType] ";" ;

VariantType.                    VariantType ::= TypeName [VariantTypeArgument] ;

VariantTypeArgumentCustType.    VariantTypeArgument ::= "(" VariantType ")" ;
VariantTypeArgumentType.        VariantTypeArgument ::= Type ;

VarDef.	                        VarDef ::= VarName "=" Expr ;

separator                       nonempty TopDef "\n" ;
separator                       nonempty VariantType "|" ;
separator                       VariantTypeArgument " " ;

-- Types ---------------------------------------------------

token PolyIdentToken lower ;

TypeInt.        Type ::= "Int" ;
TypeBool.       Type ::= "Bool" ;
TypePoly.       Type ::= "'" PolyIdentToken ;
TypeFn.         Type ::= "(" [TypeFnH] ")" ;
TypePolyFill.   Type ::= "(" TypeName [PolyIdent] ")" ;

TypeFnH.        TypeFnH ::= Type ;
PolyIdent.      PolyIdent ::= Type ;

separator       nonempty PolyIdent " " ;
separator       nonempty TypeFnH "->" ;

-- Expressions ---------------------------------------------

ETypeHelper.    Expr9 ::= "<<<" TypeName [VarName] ">>>" ; -- used only internally for type application

EVar.           Expr8 ::= VarName ;
EType.          Expr8 ::= TypeName ;
ELitInt.        Expr8 ::= Integer ;
ELitList.       Expr8 ::= "[" [ListArg] "]" ;
EBrackets.      Expr8 ::= "(" Expr ")" ;

EFApp.          Expr7 ::= Expr Expr8 ;

ELambda.        Expr6 ::= "|" VarName "|" Expr ;
EMatch.         Expr6 ::= Match ;
ELetIn.         Expr6 ::= "let" VarDef "in" Expr ;
ECond.          Expr6 ::= "if" Expr "then" Expr "else" Expr ;

ENeg.           Expr5 ::= "-" Expr6 ;
ENot.           Expr5 ::= "!" Expr6 ;
EListEx.        Expr5 ::= Expr6 ":" Expr6 ;

EMul.           Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.           Expr3 ::= Expr3 AddOp Expr4 ;

ERel.           Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.           Expr1 ::= Expr2 "&&" Expr1 ;

EOr.            Expr ::= Expr1 "\\/" Expr ;

coercions       Expr 9 ;

ListArg.        ListArg ::= Expr ;
separator       ListArg "," ;
separator       VarName " " ;
separator       nonempty Expr8 " " ;

-- Pattern Matching ---------------------------------------

Match.                                      Match ::= "match" Expr [MatchArm] ;

MatchArm.                                   MatchArm ::= "|" MatchArmSpecifier "->" Expr ;

MatchArmListEmpty.                          MatchArmSpecifierList ::= "[]" ;
MatchArmListHeadTail.                       MatchArmSpecifierList ::= MatchArmSpecifier ":" MatchArmSpecifier ;

MatchArmList.                               MatchArmSpecifier ::= MatchArmSpecifierList ;
MatchArmType.                               MatchArmSpecifier ::= TypeName [MatchArmVariantTypeArgument] ;
MatchArmVar.                                MatchArmSpecifier ::= VarName ;
MatchArmFallback.                           MatchArmSpecifier ::= "_" ;

MatchArmVariantTypeArgumentIdent.           MatchArmVariantTypeArgument ::= VarName ;
MatchArmVariantTypeArgumentFallback.        MatchArmVariantTypeArgument ::= "_" ;
MatchArmVariantTypeArgumentNested.          MatchArmVariantTypeArgument ::= "(" MatchArmSpecifier ")" ;


separator                                   nonempty MatchArm "\n" ;
separator                                   MatchArmVariantTypeArgument " " ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;
