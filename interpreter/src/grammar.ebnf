-- programs ------------------------------------------------

entrypoints Program ;

token VarName (lower (letter | digit | '_')*) ;
token TypeName (upper (letter | digit | '_')*) ;

Program.   Program ::= [TopDef] ;

TopDefVar.   TopDef ::= VarDef ";";
TopDefType. TopDef ::= "type" TypeName "=" [TypeDefOption] ";";

TypeDefOption. TypeDefOption ::= TypeName [TypeH];

TypeDefHCustType. TypeH ::= "(" TypeDefOption ")";
TypeDefHType. TypeH ::= Type;

VarDef.	   VarDef ::= VarName "=" Expr ;

separator  nonempty TopDef "\n" ;

separator  VarName " " ;

separator  TypeDefOption "|" ;

separator  TypeH " " ;

-- Types ---------------------------------------------------

token PolyIdentToken lower;

TypeInt.    Type ::= "int";
TypeBool.   Type ::= "bool";
TypePoly.   Type ::= "'" PolyIdentToken;
TypeFn.     Type ::= "(" [TypeFnH] ")";
TypeFnH.     TypeFnH ::= Type ;
TypeList.   Type ::= "[" Type "]";
TypePolyFill.   Type ::= TypeName [PolyIdent];
PolyIdent.  PolyIdent ::= Type;
separator   nonempty PolyIdent " ";
separator   nonempty TypeFnH "->";

-- Expressions ---------------------------------------------

LambdaExpr. Expr6 ::= "|" [VarName] "|" Expr;

MatchExpr. Expr6 ::= Match;

ELetIn.    Expr6 ::= "let" VarDef "in" Expr ;

ECond.     Expr6 ::= "if" Expr "then" Expr "else" Expr ;

EApp.      Expr6 ::= VarOrTypeIdent [Expr] ;

ELitInt.   Expr6 ::= Integer ;

ELitList.  Expr6 ::= "[" [ListArg] "]" ;

EBrackets.  Expr6 ::= "(" Expr ")" ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EListEx.   Expr5 ::= Expr6 ":" Expr6;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "\\/" Expr ;

ListArg.   ListArg ::= Expr;

VarIdent.  VarOrTypeIdent ::= VarName;
TypeIdent.  VarOrTypeIdent ::= TypeName;

coercions  Expr 6 ;

separator  ListArg "," ;
separator  Expr " " ;

-- Pattern Matching ---------------------------------------

Match.              Match ::= "match" Expr "with" [MatchArm];

MatchArm.           MatchArm ::= MatchArmSpecifier "->" Expr;

MatchArmSpecifierH. MatchArmSpecifierHelper ::= MatchArmSpecifier;
MatchArmSpecifierHI. MatchArmSpecifierHelper ::= VarName;
MatchArmSpecifierHU. MatchArmSpecifierHelper ::= "_";

MatchArmListEmpty.       MatchArmSpecifier ::= "[]" ;
MatchArmListSingleton.   MatchArmSpecifier ::= "["MatchArmSpecifierHelper"]" ;
MatchArmListHeadTail.    MatchArmSpecifier ::= MatchArmSpecifierHelper ":" MatchArmSpecifierHelper;

MatchArmType.                MatchArmSpecifier ::= TypeName [MatchArmTypeHelper];
MatchArmTypeHelperIdent.     MatchArmTypeHelper ::= TypeName;
MatchArmTypeHelperFallback.     MatchArmTypeHelper ::= "_";
MatchArmTypeHelperType.      MatchArmTypeHelper ::= "(" MatchArmSpecifier ")";


separator MatchArm "" ;
separator MatchArmTypeHelper " " ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "//" ;

comment    "/*" "*/" ;
