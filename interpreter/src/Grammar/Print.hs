-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for Grammar.

module Grammar.Print where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified Grammar.Abs

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t', null spc, null rest) of
      (True , _   , True ) -> []              -- remove trailing space
      (False, _   , True ) -> t'              -- remove trailing space
      (False, True, False) -> t' ++ ' ' : s   -- add space if none
      _                    -> t' ++ s
    where
      t'          = showString t []
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print Grammar.Abs.Ident where
  prt _ (Grammar.Abs.Ident i) = doc $ showString i
instance Print Grammar.Abs.VarIdent where
  prt _ (Grammar.Abs.VarIdent i) = doc $ showString i
instance Print Grammar.Abs.TypeIdent where
  prt _ (Grammar.Abs.TypeIdent i) = doc $ showString i
instance Print Grammar.Abs.PolyIdentToken where
  prt _ (Grammar.Abs.PolyIdentToken i) = doc $ showString i
instance Print Grammar.Abs.Program where
  prt i = \case
    Grammar.Abs.Program topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print Grammar.Abs.TopDef where
  prt i = \case
    Grammar.Abs.TopDefFn vardef -> prPrec i 0 (concatD [prt 0 vardef, doc (showString ";")])
    Grammar.Abs.TopDefType typedef -> prPrec i 0 (concatD [prt 0 typedef, doc (showString ";")])

instance Print Grammar.Abs.TypeDef where
  prt i = \case
    Grammar.Abs.TypeDef typeident typedefoption -> prPrec i 0 (concatD [doc (showString "type"), prt 0 typeident, doc (showString "="), prt 0 typedefoption])

instance Print Grammar.Abs.TypeDefOption where
  prt i = \case
    Grammar.Abs.TypeDefOption typeident typehs -> prPrec i 0 (concatD [prt 0 typeident, prt 0 typehs])

instance Print Grammar.Abs.TypeH where
  prt i = \case
    Grammar.Abs.TypeDefHCustType typedefoption -> prPrec i 0 (concatD [doc (showString "("), prt 0 typedefoption, doc (showString ")")])
    Grammar.Abs.TypeDefHType type_ -> prPrec i 0 (concatD [prt 0 type_])

instance Print Grammar.Abs.VarDef where
  prt i = \case
    Grammar.Abs.VarDef varident expr -> prPrec i 0 (concatD [prt 0 varident, doc (showString "="), prt 0 expr])

instance Print [Grammar.Abs.TopDef] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x, doc (showString "\n")]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "\n"), prt 0 xs]

instance Print Grammar.Abs.Arg where
  prt i = \case
    Grammar.Abs.Arg varident -> prPrec i 0 (concatD [prt 0 varident])

instance Print [Grammar.Abs.Arg] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print [Grammar.Abs.TypeDefOption] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print [Grammar.Abs.TypeH] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print Grammar.Abs.Type where
  prt i = \case
    Grammar.Abs.TypeInt -> prPrec i 0 (concatD [doc (showString "int")])
    Grammar.Abs.TypeBool -> prPrec i 0 (concatD [doc (showString "bool")])
    Grammar.Abs.TypePoly polyidenttoken -> prPrec i 0 (concatD [doc (showString "'"), prt 0 polyidenttoken])
    Grammar.Abs.TypeFn typefnhs -> prPrec i 0 (concatD [prt 0 typefnhs])
    Grammar.Abs.TypeList type_ -> prPrec i 0 (concatD [doc (showString "["), prt 0 type_, doc (showString "]")])
    Grammar.Abs.TypePolyFill typeident polyidents -> prPrec i 0 (concatD [prt 0 typeident, prt 0 polyidents])

instance Print Grammar.Abs.TypeFnH where
  prt i = \case
    Grammar.Abs.TypeFnH type_ -> prPrec i 0 (concatD [prt 0 type_])

instance Print Grammar.Abs.PolyIdent where
  prt i = \case
    Grammar.Abs.PolyIdent type_ -> prPrec i 0 (concatD [prt 0 type_])

instance Print [Grammar.Abs.PolyIdent] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print [Grammar.Abs.TypeFnH] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "->"), prt 0 xs]

instance Print Grammar.Abs.BExpr where
  prt i = \case
    Grammar.Abs.BEApp varident exprs -> prPrec i 4 (concatD [prt 0 varident, prt 0 exprs])
    Grammar.Abs.BEBrackets bexpr -> prPrec i 4 (concatD [doc (showString "("), prt 0 bexpr, doc (showString ")")])
    Grammar.Abs.Not bexpr -> prPrec i 3 (concatD [doc (showString "!"), prt 4 bexpr])
    Grammar.Abs.BERel expr1 relop expr2 -> prPrec i 2 (concatD [prt 0 expr1, prt 0 relop, prt 0 expr2])
    Grammar.Abs.BEAnd bexpr1 bexpr2 -> prPrec i 1 (concatD [prt 2 bexpr1, doc (showString "&&"), prt 1 bexpr2])
    Grammar.Abs.BEOr bexpr1 bexpr2 -> prPrec i 0 (concatD [prt 1 bexpr1, doc (showString "\\/"), prt 0 bexpr2])

instance Print Grammar.Abs.Expr where
  prt i = \case
    Grammar.Abs.LambdaExpr args expr -> prPrec i 3 (concatD [doc (showString "|"), prt 0 args, doc (showString "|"), prt 0 expr])
    Grammar.Abs.MatchExpr match -> prPrec i 3 (concatD [prt 0 match])
    Grammar.Abs.EBExpr bexpr -> prPrec i 3 (concatD [prt 0 bexpr])
    Grammar.Abs.ELetIn vardef expr -> prPrec i 3 (concatD [doc (showString "let"), prt 0 vardef, doc (showString "in"), prt 0 expr])
    Grammar.Abs.ECond bexpr expr1 expr2 -> prPrec i 3 (concatD [doc (showString "if"), prt 0 bexpr, doc (showString "then"), prt 0 expr1, doc (showString "else"), prt 0 expr2])
    Grammar.Abs.EApp id_ exprs -> prPrec i 3 (concatD [prt 0 id_, prt 0 exprs])
    Grammar.Abs.ELitInt n -> prPrec i 3 (concatD [prt 0 n])
    Grammar.Abs.ELitList largs -> prPrec i 3 (concatD [doc (showString "["), prt 0 largs, doc (showString "]")])
    Grammar.Abs.EBrackets expr -> prPrec i 3 (concatD [doc (showString "("), prt 0 expr, doc (showString ")")])
    Grammar.Abs.Neg expr -> prPrec i 2 (concatD [doc (showString "-"), prt 3 expr])
    Grammar.Abs.EListEx expr1 expr2 -> prPrec i 2 (concatD [prt 3 expr1, doc (showString ":"), prt 3 expr2])
    Grammar.Abs.EMul expr1 mulop expr2 -> prPrec i 1 (concatD [prt 1 expr1, prt 0 mulop, prt 2 expr2])
    Grammar.Abs.EAdd expr1 addop expr2 -> prPrec i 0 (concatD [prt 1 expr1, prt 0 addop, prt 0 expr2])

instance Print Grammar.Abs.LArg where
  prt i = \case
    Grammar.Abs.ListArg expr -> prPrec i 0 (concatD [prt 0 expr])

instance Print [Grammar.Abs.LArg] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print [Grammar.Abs.Expr] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print Grammar.Abs.Match where
  prt i = \case
    Grammar.Abs.Match expr matcharms -> prPrec i 0 (concatD [doc (showString "match"), prt 0 expr, doc (showString "with"), prt 0 matcharms])

instance Print Grammar.Abs.MatchArm where
  prt i = \case
    Grammar.Abs.MatchArm matcharmspecifier expr -> prPrec i 0 (concatD [prt 0 matcharmspecifier, doc (showString "->"), prt 0 expr])

instance Print Grammar.Abs.MatchArmSpecifierHelper where
  prt i = \case
    Grammar.Abs.MatchArmSpecifierH matcharmspecifier -> prPrec i 0 (concatD [prt 0 matcharmspecifier])
    Grammar.Abs.MatchArmSpecifierHI varident -> prPrec i 0 (concatD [prt 0 varident])
    Grammar.Abs.MatchArmSpecifierHU -> prPrec i 0 (concatD [doc (showString "_")])

instance Print Grammar.Abs.MatchArmSpecifier where
  prt i = \case
    Grammar.Abs.MatchArmListEmpty -> prPrec i 0 (concatD [doc (showString "[]")])
    Grammar.Abs.MatchArmListSingleton matcharmspecifierhelper -> prPrec i 0 (concatD [doc (showString "["), prt 0 matcharmspecifierhelper, doc (showString "]")])
    Grammar.Abs.MatchArmListHeadTail matcharmspecifierhelper1 matcharmspecifierhelper2 -> prPrec i 0 (concatD [prt 0 matcharmspecifierhelper1, doc (showString ":"), prt 0 matcharmspecifierhelper2])
    Grammar.Abs.MatchArmType typeident matcharmtypehelpers -> prPrec i 0 (concatD [prt 0 typeident, prt 0 matcharmtypehelpers])

instance Print Grammar.Abs.MatchArmTypeHelper where
  prt i = \case
    Grammar.Abs.MatchArmTypeHelperIdent typeident -> prPrec i 0 (concatD [prt 0 typeident])
    Grammar.Abs.MatchArmTypeHelperFallback -> prPrec i 0 (concatD [doc (showString "_")])
    Grammar.Abs.MatchArmTypeHelperType matcharmspecifier -> prPrec i 0 (concatD [doc (showString "("), prt 0 matcharmspecifier, doc (showString ")")])

instance Print [Grammar.Abs.MatchArm] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print [Grammar.Abs.MatchArmTypeHelper] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, doc (showString " "), prt 0 xs]

instance Print Grammar.Abs.AddOp where
  prt i = \case
    Grammar.Abs.Plus -> prPrec i 0 (concatD [doc (showString "+")])
    Grammar.Abs.Minus -> prPrec i 0 (concatD [doc (showString "-")])

instance Print Grammar.Abs.MulOp where
  prt i = \case
    Grammar.Abs.Times -> prPrec i 0 (concatD [doc (showString "*")])
    Grammar.Abs.Div -> prPrec i 0 (concatD [doc (showString "/")])
    Grammar.Abs.Mod -> prPrec i 0 (concatD [doc (showString "%")])

instance Print Grammar.Abs.RelOp where
  prt i = \case
    Grammar.Abs.LTH -> prPrec i 0 (concatD [doc (showString "<")])
    Grammar.Abs.LE -> prPrec i 0 (concatD [doc (showString "<=")])
    Grammar.Abs.GTH -> prPrec i 0 (concatD [doc (showString ">")])
    Grammar.Abs.GE -> prPrec i 0 (concatD [doc (showString ">=")])
    Grammar.Abs.EQU -> prPrec i 0 (concatD [doc (showString "==")])
    Grammar.Abs.NE -> prPrec i 0 (concatD [doc (showString "!=")])
