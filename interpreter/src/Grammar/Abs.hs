-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language grammar.

module Grammar.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = Program [TopDef]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TopDef = TopDefFn VarDef | TopDefType TypeDef
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeDef = TypeDef TypeIdent TypeDefOption
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeDefOption = TypeDefOption TypeIdent [TypeH]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeH = TypeDefHCustType TypeDefOption | TypeDefHType Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarDef = VarDef VarIdent Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Arg = Arg VarIdent
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Type
    = TypeInt
    | TypeBool
    | TypePoly PolyIdentToken
    | TypeFn [TypeFnH]
    | TypeList Type
    | TypePolyFill TypeIdent [PolyIdent]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeFnH = TypeFnH Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PolyIdent = PolyIdent Type
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BExpr
    = BEApp VarIdent [Expr]
    | BEBrackets BExpr
    | Not BExpr
    | BERel Expr RelOp Expr
    | BEAnd BExpr BExpr
    | BEOr BExpr BExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expr
    = LambdaExpr [Arg] Expr
    | MatchExpr Match
    | EBExpr BExpr
    | ELetIn VarDef Expr
    | ECond BExpr Expr Expr
    | EApp Ident [Expr]
    | ELitInt Integer
    | ELitList [LArg]
    | EBrackets Expr
    | Neg Expr
    | EListEx Expr Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LArg = ListArg Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Match = Match Expr [MatchArm]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchArm = MatchArm MatchArmSpecifier Expr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchArmSpecifierHelper
    = MatchArmSpecifierH MatchArmSpecifier
    | MatchArmSpecifierHI VarIdent
    | MatchArmSpecifierHU
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchArmSpecifier
    = MatchArmListEmpty
    | MatchArmListSingleton MatchArmSpecifierHelper
    | MatchArmListHeadTail MatchArmSpecifierHelper MatchArmSpecifierHelper
    | MatchArmType TypeIdent [MatchArmTypeHelper]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MatchArmTypeHelper
    = MatchArmTypeHelperIdent TypeIdent
    | MatchArmTypeHelperFallback
    | MatchArmTypeHelperType MatchArmSpecifier
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AddOp = Plus | Minus
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MulOp = Times | Div | Mod
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype VarIdent = VarIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TypeIdent = TypeIdent String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype PolyIdentToken = PolyIdentToken String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

