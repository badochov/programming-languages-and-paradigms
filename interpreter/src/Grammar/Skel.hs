-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Grammar.Abs.Ident -> Result
transIdent x = case x of
  Grammar.Abs.Ident string -> failure x

transVarIdent :: Grammar.Abs.VarIdent -> Result
transVarIdent x = case x of
  Grammar.Abs.VarIdent string -> failure x

transTypeIdent :: Grammar.Abs.TypeIdent -> Result
transTypeIdent x = case x of
  Grammar.Abs.TypeIdent string -> failure x

transPolyIdentToken :: Grammar.Abs.PolyIdentToken -> Result
transPolyIdentToken x = case x of
  Grammar.Abs.PolyIdentToken string -> failure x

transProgram :: Grammar.Abs.Program -> Result
transProgram x = case x of
  Grammar.Abs.Program topdefs -> failure x

transTopDef :: Grammar.Abs.TopDef -> Result
transTopDef x = case x of
  Grammar.Abs.TopDefFn vardef -> failure x
  Grammar.Abs.TopDefType typedef -> failure x

transTypeDef :: Grammar.Abs.TypeDef -> Result
transTypeDef x = case x of
  Grammar.Abs.TypeDef typeident typedefoption -> failure x

transTypeDefOption :: Grammar.Abs.TypeDefOption -> Result
transTypeDefOption x = case x of
  Grammar.Abs.TypeDefOption typeident typehs -> failure x

transTypeH :: Grammar.Abs.TypeH -> Result
transTypeH x = case x of
  Grammar.Abs.TypeDefHCustType typedefoption -> failure x
  Grammar.Abs.TypeDefHType type_ -> failure x

transVarDef :: Grammar.Abs.VarDef -> Result
transVarDef x = case x of
  Grammar.Abs.VarDef varident expr -> failure x

transArg :: Grammar.Abs.Arg -> Result
transArg x = case x of
  Grammar.Abs.Arg varident -> failure x

transType :: Grammar.Abs.Type -> Result
transType x = case x of
  Grammar.Abs.TypeInt -> failure x
  Grammar.Abs.TypeBool -> failure x
  Grammar.Abs.TypePoly polyidenttoken -> failure x
  Grammar.Abs.TypeFn typefnhs -> failure x
  Grammar.Abs.TypeList type_ -> failure x
  Grammar.Abs.TypePolyFill typeident polyidents -> failure x

transTypeFnH :: Grammar.Abs.TypeFnH -> Result
transTypeFnH x = case x of
  Grammar.Abs.TypeFnH type_ -> failure x

transPolyIdent :: Grammar.Abs.PolyIdent -> Result
transPolyIdent x = case x of
  Grammar.Abs.PolyIdent type_ -> failure x

transBExpr :: Grammar.Abs.BExpr -> Result
transBExpr x = case x of
  Grammar.Abs.BEApp varident exprs -> failure x
  Grammar.Abs.BEBrackets bexpr -> failure x
  Grammar.Abs.Not bexpr -> failure x
  Grammar.Abs.BERel expr1 relop expr2 -> failure x
  Grammar.Abs.BEAnd bexpr1 bexpr2 -> failure x
  Grammar.Abs.BEOr bexpr1 bexpr2 -> failure x

transExpr :: Grammar.Abs.Expr -> Result
transExpr x = case x of
  Grammar.Abs.LambdaExpr args expr -> failure x
  Grammar.Abs.MatchExpr match -> failure x
  Grammar.Abs.EBExpr bexpr -> failure x
  Grammar.Abs.ELetIn vardef expr -> failure x
  Grammar.Abs.ECond bexpr expr1 expr2 -> failure x
  Grammar.Abs.EApp ident exprs -> failure x
  Grammar.Abs.ELitInt integer -> failure x
  Grammar.Abs.ELitList largs -> failure x
  Grammar.Abs.EBrackets expr -> failure x
  Grammar.Abs.Neg expr -> failure x
  Grammar.Abs.EListEx expr1 expr2 -> failure x
  Grammar.Abs.EMul expr1 mulop expr2 -> failure x
  Grammar.Abs.EAdd expr1 addop expr2 -> failure x

transLArg :: Grammar.Abs.LArg -> Result
transLArg x = case x of
  Grammar.Abs.ListArg expr -> failure x

transMatch :: Grammar.Abs.Match -> Result
transMatch x = case x of
  Grammar.Abs.Match expr matcharms -> failure x

transMatchArm :: Grammar.Abs.MatchArm -> Result
transMatchArm x = case x of
  Grammar.Abs.MatchArm matcharmspecifier expr -> failure x

transMatchArmSpecifierHelper :: Grammar.Abs.MatchArmSpecifierHelper -> Result
transMatchArmSpecifierHelper x = case x of
  Grammar.Abs.MatchArmSpecifierH matcharmspecifier -> failure x
  Grammar.Abs.MatchArmSpecifierHI varident -> failure x
  Grammar.Abs.MatchArmSpecifierHU -> failure x

transMatchArmSpecifier :: Grammar.Abs.MatchArmSpecifier -> Result
transMatchArmSpecifier x = case x of
  Grammar.Abs.MatchArmListEmpty -> failure x
  Grammar.Abs.MatchArmListSingleton matcharmspecifierhelper -> failure x
  Grammar.Abs.MatchArmListHeadTail matcharmspecifierhelper1 matcharmspecifierhelper2 -> failure x
  Grammar.Abs.MatchArmType typeident matcharmtypehelpers -> failure x

transMatchArmTypeHelper :: Grammar.Abs.MatchArmTypeHelper -> Result
transMatchArmTypeHelper x = case x of
  Grammar.Abs.MatchArmTypeHelperIdent typeident -> failure x
  Grammar.Abs.MatchArmTypeHelperFallback -> failure x
  Grammar.Abs.MatchArmTypeHelperType matcharmspecifier -> failure x

transAddOp :: Grammar.Abs.AddOp -> Result
transAddOp x = case x of
  Grammar.Abs.Plus -> failure x
  Grammar.Abs.Minus -> failure x

transMulOp :: Grammar.Abs.MulOp -> Result
transMulOp x = case x of
  Grammar.Abs.Times -> failure x
  Grammar.Abs.Div -> failure x
  Grammar.Abs.Mod -> failure x

transRelOp :: Grammar.Abs.RelOp -> Result
transRelOp x = case x of
  Grammar.Abs.LTH -> failure x
  Grammar.Abs.LE -> failure x
  Grammar.Abs.GTH -> failure x
  Grammar.Abs.GE -> failure x
  Grammar.Abs.EQU -> failure x
  Grammar.Abs.NE -> failure x
