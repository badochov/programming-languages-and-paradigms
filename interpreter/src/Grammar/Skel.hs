-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Grammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Grammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transVarName :: Grammar.Abs.VarName -> Result
transVarName x = case x of
  Grammar.Abs.VarName string -> failure x

transTypeName :: Grammar.Abs.TypeName -> Result
transTypeName x = case x of
  Grammar.Abs.TypeName string -> failure x

transPolyIdentToken :: Grammar.Abs.PolyIdentToken -> Result
transPolyIdentToken x = case x of
  Grammar.Abs.PolyIdentToken string -> failure x

transProgram :: Show a => Grammar.Abs.Program' a -> Result
transProgram x = case x of
  Grammar.Abs.Program _ topdefs -> failure x

transTopDef :: Show a => Grammar.Abs.TopDef' a -> Result
transTopDef x = case x of
  Grammar.Abs.TopDefVar _ vardef -> failure x
  Grammar.Abs.TopDefType _ typename typedefoptions -> failure x

transTypeDefOption :: Show a => Grammar.Abs.TypeDefOption' a -> Result
transTypeDefOption x = case x of
  Grammar.Abs.TypeDefOption _ typename typehs -> failure x

transTypeH :: Show a => Grammar.Abs.TypeH' a -> Result
transTypeH x = case x of
  Grammar.Abs.TypeDefHCustType _ typedefoption -> failure x
  Grammar.Abs.TypeDefHType _ type_ -> failure x

transVarDef :: Show a => Grammar.Abs.VarDef' a -> Result
transVarDef x = case x of
  Grammar.Abs.VarDef _ varname expr -> failure x

transType :: Show a => Grammar.Abs.Type' a -> Result
transType x = case x of
  Grammar.Abs.TypeInt _ -> failure x
  Grammar.Abs.TypeBool _ -> failure x
  Grammar.Abs.TypePoly _ polyidenttoken -> failure x
  Grammar.Abs.TypeFn _ typefnhs -> failure x
  Grammar.Abs.TypeList _ type_ -> failure x
  Grammar.Abs.TypePolyFill _ typename polyidents -> failure x

transTypeFnH :: Show a => Grammar.Abs.TypeFnH' a -> Result
transTypeFnH x = case x of
  Grammar.Abs.TypeFnH _ type_ -> failure x

transPolyIdent :: Show a => Grammar.Abs.PolyIdent' a -> Result
transPolyIdent x = case x of
  Grammar.Abs.PolyIdent _ type_ -> failure x

transExpr :: Show a => Grammar.Abs.Expr' a -> Result
transExpr x = case x of
  Grammar.Abs.LambdaExpr _ varnames expr -> failure x
  Grammar.Abs.MatchExpr _ match -> failure x
  Grammar.Abs.ELetIn _ vardef expr -> failure x
  Grammar.Abs.ECond _ expr1 expr2 expr3 -> failure x
  Grammar.Abs.EApp _ varortypeident exprs -> failure x
  Grammar.Abs.ELitInt _ integer -> failure x
  Grammar.Abs.ELitList _ listargs -> failure x
  Grammar.Abs.EBrackets _ expr -> failure x
  Grammar.Abs.Neg _ expr -> failure x
  Grammar.Abs.Not _ expr -> failure x
  Grammar.Abs.EListEx _ expr1 expr2 -> failure x
  Grammar.Abs.EMul _ expr1 mulop expr2 -> failure x
  Grammar.Abs.EAdd _ expr1 addop expr2 -> failure x
  Grammar.Abs.ERel _ expr1 relop expr2 -> failure x
  Grammar.Abs.EAnd _ expr1 expr2 -> failure x
  Grammar.Abs.EOr _ expr1 expr2 -> failure x

transListArg :: Show a => Grammar.Abs.ListArg' a -> Result
transListArg x = case x of
  Grammar.Abs.ListArg _ expr -> failure x

transVarOrTypeIdent :: Show a => Grammar.Abs.VarOrTypeIdent' a -> Result
transVarOrTypeIdent x = case x of
  Grammar.Abs.VarIdent _ varname -> failure x
  Grammar.Abs.TypeIdent _ typename -> failure x

transMatch :: Show a => Grammar.Abs.Match' a -> Result
transMatch x = case x of
  Grammar.Abs.Match _ expr matcharms -> failure x

transMatchArm :: Show a => Grammar.Abs.MatchArm' a -> Result
transMatchArm x = case x of
  Grammar.Abs.MatchArm _ matcharmspecifier expr -> failure x

transMatchArmSpecifierHelper :: Show a => Grammar.Abs.MatchArmSpecifierHelper' a -> Result
transMatchArmSpecifierHelper x = case x of
  Grammar.Abs.MatchArmSpecifierH _ matcharmspecifier -> failure x
  Grammar.Abs.MatchArmSpecifierHI _ varname -> failure x
  Grammar.Abs.MatchArmSpecifierHU _ -> failure x

transMatchArmSpecifier :: Show a => Grammar.Abs.MatchArmSpecifier' a -> Result
transMatchArmSpecifier x = case x of
  Grammar.Abs.MatchArmListEmpty _ -> failure x
  Grammar.Abs.MatchArmListSingleton _ matcharmspecifierhelper -> failure x
  Grammar.Abs.MatchArmListHeadTail _ matcharmspecifierhelper1 matcharmspecifierhelper2 -> failure x
  Grammar.Abs.MatchArmType _ typename matcharmtypehelpers -> failure x

transMatchArmTypeHelper :: Show a => Grammar.Abs.MatchArmTypeHelper' a -> Result
transMatchArmTypeHelper x = case x of
  Grammar.Abs.MatchArmTypeHelperIdent _ typename -> failure x
  Grammar.Abs.MatchArmTypeHelperFallback _ -> failure x
  Grammar.Abs.MatchArmTypeHelperType _ matcharmspecifier -> failure x

transAddOp :: Show a => Grammar.Abs.AddOp' a -> Result
transAddOp x = case x of
  Grammar.Abs.Plus _ -> failure x
  Grammar.Abs.Minus _ -> failure x

transMulOp :: Show a => Grammar.Abs.MulOp' a -> Result
transMulOp x = case x of
  Grammar.Abs.Times _ -> failure x
  Grammar.Abs.Div _ -> failure x
  Grammar.Abs.Mod _ -> failure x

transRelOp :: Show a => Grammar.Abs.RelOp' a -> Result
transRelOp x = case x of
  Grammar.Abs.LTH _ -> failure x
  Grammar.Abs.LE _ -> failure x
  Grammar.Abs.GTH _ -> failure x
  Grammar.Abs.GE _ -> failure x
  Grammar.Abs.EQU _ -> failure x
  Grammar.Abs.NE _ -> failure x
