-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}

-- | The abstract syntax of language grammar.

module Grammar.Abs where

import Prelude (Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

type Program = Program' BNFC'Position
data Program' a = Prog a [TopDef' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TopDef = TopDef' BNFC'Position
data TopDef' a
    = TopDefVar a (VarDef' a)
    | TopDefType a TypeName [TypeDefOption' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TypeDefOption = TypeDefOption' BNFC'Position
data TypeDefOption' a = TypeDefOption a TypeName [TypeH' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TypeH = TypeH' BNFC'Position
data TypeH' a
    = TypeDefHCustType a (TypeDefOption' a) | TypeDefHType a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type VarDef = VarDef' BNFC'Position
data VarDef' a = VarDef a VarName (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Type = Type' BNFC'Position
data Type' a
    = TypeInt a
    | TypeBool a
    | TypePoly a PolyIdentToken
    | TypeFn a [TypeFnH' a]
    | TypeList a (Type' a)
    | TypePolyFill a TypeName [PolyIdent' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TypeFnH = TypeFnH' BNFC'Position
data TypeFnH' a = TypeFnH a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type PolyIdent = PolyIdent' BNFC'Position
data PolyIdent' a = PolyIdent a (Type' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Expr = Expr' BNFC'Position
data Expr' a
    = LambdaExpr a [VarName] (Expr' a)
    | MatchExpr a (Match' a)
    | ELetIn a (VarDef' a) (Expr' a)
    | ECond a (Expr' a) (Expr' a) (Expr' a)
    | EApp a (VarOrTypeIdent' a) [Expr' a]
    | ELitInt a Integer
    | ELitList a [ListArg' a]
    | EBrackets a (Expr' a)
    | Neg a (Expr' a)
    | Not a (Expr' a)
    | EListEx a (Expr' a) (Expr' a)
    | EMul a (Expr' a) (MulOp' a) (Expr' a)
    | EAdd a (Expr' a) (AddOp' a) (Expr' a)
    | ERel a (Expr' a) (RelOp' a) (Expr' a)
    | EAnd a (Expr' a) (Expr' a)
    | EOr a (Expr' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ListArg = ListArg' BNFC'Position
data ListArg' a = ListArg a (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type VarOrTypeIdent = VarOrTypeIdent' BNFC'Position
data VarOrTypeIdent' a = VarIdent a VarName | TypeIdent a TypeName
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Match = Match' BNFC'Position
data Match' a = Match a (Expr' a) [MatchArm' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MatchArm = MatchArm' BNFC'Position
data MatchArm' a = MatchArm a (MatchArmSpecifier' a) (Expr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MatchArmSpecifierHelper = MatchArmSpecifierHelper' BNFC'Position
data MatchArmSpecifierHelper' a
    = MatchArmSpecifierH a (MatchArmSpecifier' a)
    | MatchArmSpecifierHI a VarName
    | MatchArmSpecifierHU a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MatchArmSpecifier = MatchArmSpecifier' BNFC'Position
data MatchArmSpecifier' a
    = MatchArmListEmpty a
    | MatchArmListSingleton a (MatchArmSpecifierHelper' a)
    | MatchArmListHeadTail a (MatchArmSpecifierHelper' a) (MatchArmSpecifierHelper' a)
    | MatchArmType a TypeName [MatchArmTypeHelper' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MatchArmTypeHelper = MatchArmTypeHelper' BNFC'Position
data MatchArmTypeHelper' a
    = MatchArmTypeHelperIdent a TypeName
    | MatchArmTypeHelperFallback a
    | MatchArmTypeHelperType a (MatchArmSpecifier' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type AddOp = AddOp' BNFC'Position
data AddOp' a = Plus a | Minus a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type MulOp = MulOp' BNFC'Position
data MulOp' a = Times a | Div a | Mod a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type RelOp = RelOp' BNFC'Position
data RelOp' a = LTH a | LE a | GTH a | GE a | EQU a | NE a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype VarName = VarName String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype TypeName = TypeName String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype PolyIdentToken = PolyIdentToken String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition Program where
  hasPosition = \case
    Prog p _ -> p

instance HasPosition TopDef where
  hasPosition = \case
    TopDefVar p _ -> p
    TopDefType p _ _ -> p

instance HasPosition TypeDefOption where
  hasPosition = \case
    TypeDefOption p _ _ -> p

instance HasPosition TypeH where
  hasPosition = \case
    TypeDefHCustType p _ -> p
    TypeDefHType p _ -> p

instance HasPosition VarDef where
  hasPosition = \case
    VarDef p _ _ -> p

instance HasPosition Type where
  hasPosition = \case
    TypeInt p -> p
    TypeBool p -> p
    TypePoly p _ -> p
    TypeFn p _ -> p
    TypeList p _ -> p
    TypePolyFill p _ _ -> p

instance HasPosition TypeFnH where
  hasPosition = \case
    TypeFnH p _ -> p

instance HasPosition PolyIdent where
  hasPosition = \case
    PolyIdent p _ -> p

instance HasPosition Expr where
  hasPosition = \case
    LambdaExpr p _ _ -> p
    MatchExpr p _ -> p
    ELetIn p _ _ -> p
    ECond p _ _ _ -> p
    EApp p _ _ -> p
    ELitInt p _ -> p
    ELitList p _ -> p
    EBrackets p _ -> p
    Neg p _ -> p
    Not p _ -> p
    EListEx p _ _ -> p
    EMul p _ _ _ -> p
    EAdd p _ _ _ -> p
    ERel p _ _ _ -> p
    EAnd p _ _ -> p
    EOr p _ _ -> p

instance HasPosition ListArg where
  hasPosition = \case
    ListArg p _ -> p

instance HasPosition VarOrTypeIdent where
  hasPosition = \case
    VarIdent p _ -> p
    TypeIdent p _ -> p

instance HasPosition Match where
  hasPosition = \case
    Match p _ _ -> p

instance HasPosition MatchArm where
  hasPosition = \case
    MatchArm p _ _ -> p

instance HasPosition MatchArmSpecifierHelper where
  hasPosition = \case
    MatchArmSpecifierH p _ -> p
    MatchArmSpecifierHI p _ -> p
    MatchArmSpecifierHU p -> p

instance HasPosition MatchArmSpecifier where
  hasPosition = \case
    MatchArmListEmpty p -> p
    MatchArmListSingleton p _ -> p
    MatchArmListHeadTail p _ _ -> p
    MatchArmType p _ _ -> p

instance HasPosition MatchArmTypeHelper where
  hasPosition = \case
    MatchArmTypeHelperIdent p _ -> p
    MatchArmTypeHelperFallback p -> p
    MatchArmTypeHelperType p _ -> p

instance HasPosition AddOp where
  hasPosition = \case
    Plus p -> p
    Minus p -> p

instance HasPosition MulOp where
  hasPosition = \case
    Times p -> p
    Div p -> p
    Mod p -> p

instance HasPosition RelOp where
  hasPosition = \case
    LTH p -> p
    LE p -> p
    GTH p -> p
    GE p -> p
    EQU p -> p
    NE p -> p

